//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Barcline.OpenEhr.Model
{
    using System;
    using System.Data.Common;
    using System.Data.Entity;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    
    
    /// <remarks/>
    /// <summary>
    /// Required properties: entities
    /// </summary>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.openehr.org/v1")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.openehr.org/v1", IsNullable=true)]
    [Table("EXTRACT_MANIFEST", Schema = "openehr")]
    public partial class EXTRACT_MANIFEST : System.ComponentModel.INotifyPropertyChanged
    {
        
        private EXTRACT_ENTITY_MANIFESTCollection entitiesField;
        
        [System.Xml.Serialization.XmlElementAttribute("entities")]
        [Barcline.Core.MaxOccurs("unbounded")]
        [Required()]
        public virtual EXTRACT_ENTITY_MANIFESTCollection entities
        {
            get
            {
                if (entitiesField == null)
                {
                    this.entitiesField = new EXTRACT_ENTITY_MANIFESTCollection();
                }
                return entitiesField;
            }
            set
            {
                this.entitiesField = value;
                if (value != null)
                {
                }
                this.RaisePropertyChanged("entities");
            }
        }

        [field: NonSerialized]
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
