//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Barcline.OpenEhr.Model
{
    using System;
    using System.Data.Common;
    using System.Data.Entity;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    
    
    /// <remarks/>
    /// <summary>
    /// Required properties: extract_type, includes_directory, includes_multimedia, link_depth, manifest
    /// </summary>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.openehr.org/v1")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.openehr.org/v1", IsNullable=true)]
    [Table("EXTRACT_SPEC", Schema = "openehr")]
    public partial class EXTRACT_SPEC : System.ComponentModel.INotifyPropertyChanged
    {
        
        private string extract_typeField;
        
        private bool includes_multimediaField;
        
        private int link_depthField;
        
        private DV_PARSABLECollection criteriaField;
        
        private bool includes_directoryField;
        
        private ARCHETYPE_ID directory_archetypeField;
        
        private ITEM_STRUCTURE other_detailsField;
        
        private EXTRACT_VERSION_SPEC version_specField;
        
        private EXTRACT_ENTITY_MANIFESTCollection manifestField;
        
        [Required()]
        [MaxLength(4000)]
        public virtual string extract_type
        {
            get
            {
                return this.extract_typeField;
            }
            set
            {
                this.extract_typeField = value;
                this.RaisePropertyChanged("extract_type");
            }
        }
        
        [Required()]
        public virtual bool includes_multimedia
        {
            get
            {
                return this.includes_multimediaField;
            }
            set
            {
                this.includes_multimediaField = value;
                this.RaisePropertyChanged("includes_multimedia");
            }
        }
        
        [Required()]
        public virtual int link_depth
        {
            get
            {
                return this.link_depthField;
            }
            set
            {
                this.link_depthField = value;
                this.RaisePropertyChanged("link_depth");
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("criteria")]
        [Barcline.Core.MinOccurs("0")]
        [Barcline.Core.MaxOccurs("unbounded")]
        public virtual DV_PARSABLECollection criteria
        {
            get
            {
                if (criteriaField == null)
                {
                    this.criteriaField = new DV_PARSABLECollection();
                }
                return criteriaField;
            }
            set
            {
                this.criteriaField = value;
                if (value != null)
                {
                }
                this.RaisePropertyChanged("criteria");
            }
        }
        
        [Required()]
        public virtual bool includes_directory
        {
            get
            {
                return this.includes_directoryField;
            }
            set
            {
                this.includes_directoryField = value;
                this.RaisePropertyChanged("includes_directory");
            }
        }
        
        [Barcline.Core.MinOccurs("0")]
        [System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public virtual ARCHETYPE_ID directory_archetype
        {
            get
            {
                return directory_archetypeField;
            }
            set
            {
                this.directory_archetypeField = value;
                this.RaisePropertyChanged("directory_archetype");
            }
        }
        
        [Barcline.Core.MinOccurs("0")]
        [System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public virtual ITEM_STRUCTURE other_details
        {
            get
            {
                return other_detailsField;
            }
            set
            {
                this.other_detailsField = value;
                this.RaisePropertyChanged("other_details");
            }
        }
        
        [Barcline.Core.MinOccurs("0")]
        [System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public virtual EXTRACT_VERSION_SPEC version_spec
        {
            get
            {
                return version_specField;
            }
            set
            {
                this.version_specField = value;
                this.RaisePropertyChanged("version_spec");
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("entities", IsNullable=false)]
        [Required()]
        public virtual EXTRACT_ENTITY_MANIFESTCollection manifest
        {
            get
            {
                if (manifestField == null)
                {
                    this.manifestField = new EXTRACT_ENTITY_MANIFESTCollection();
                }
                return manifestField;
            }
            set
            {
                this.manifestField = value;
                if (value != null)
                {
                }
                this.RaisePropertyChanged("manifest");
            }
        }

        [field: NonSerialized]
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
